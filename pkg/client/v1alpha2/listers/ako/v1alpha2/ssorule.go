/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/pkg/apis/ako/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SSORuleLister helps list SSORules.
// All objects returned here must be treated as read-only.
type SSORuleLister interface {
	// List lists all SSORules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.SSORule, err error)
	// SSORules returns an object that can list and get SSORules.
	SSORules(namespace string) SSORuleNamespaceLister
	SSORuleListerExpansion
}

// sSORuleLister implements the SSORuleLister interface.
type sSORuleLister struct {
	indexer cache.Indexer
}

// NewSSORuleLister returns a new SSORuleLister.
func NewSSORuleLister(indexer cache.Indexer) SSORuleLister {
	return &sSORuleLister{indexer: indexer}
}

// List lists all SSORules in the indexer.
func (s *sSORuleLister) List(selector labels.Selector) (ret []*v1alpha2.SSORule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.SSORule))
	})
	return ret, err
}

// SSORules returns an object that can list and get SSORules.
func (s *sSORuleLister) SSORules(namespace string) SSORuleNamespaceLister {
	return sSORuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SSORuleNamespaceLister helps list and get SSORules.
// All objects returned here must be treated as read-only.
type SSORuleNamespaceLister interface {
	// List lists all SSORules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.SSORule, err error)
	// Get retrieves the SSORule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.SSORule, error)
	SSORuleNamespaceListerExpansion
}

// sSORuleNamespaceLister implements the SSORuleNamespaceLister
// interface.
type sSORuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SSORules in the indexer for a given namespace.
func (s sSORuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.SSORule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.SSORule))
	})
	return ret, err
}

// Get retrieves the SSORule from the indexer for a given namespace and name.
func (s sSORuleNamespaceLister) Get(name string) (*v1alpha2.SSORule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("ssorule"), name)
	}
	return obj.(*v1alpha2.SSORule), nil
}
